# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19LUIgbq1abfvaWeOcsLw5DrCGyUyP_Ho
"""

import numpy as np
import pandas as pd
import os
for dirname, _, filenames in os.walk('/content/housing_price_dataset.csv.zip'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
housing = pd.read_csv("/content/housing_price_dataset.csv.zip")
housing.head()

housing.shape

housing.info()

housing.isnull().sum()

housing.duplicated().sum()

housing.describe()

numerical_columns = ['SquareFeet', 'Bedrooms', 'Bathrooms', 'YearBuilt', 'Price']

for col in numerical_columns:
    # Histogram for numerical columns
    plt.figure(figsize=(6, 2))
    sns.histplot(housing[col], kde=True)
    plt.title(f'Histogram for {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.show()

plt.figure(figsize=(8, 4))
sns.countplot(x='Neighborhood', data=housing, order=housing['Neighborhood'].value_counts().index)
plt.title('Count of Houses in Each Neighborhood')
plt.xlabel('Neighborhood')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

selected_pairs = [('SquareFeet', 'Price'), ('Bedrooms', 'Price'), ('Bathrooms', 'Price'), ('YearBuilt', 'Price')]

for pair in selected_pairs:
    plt.figure(figsize=(8, 4))
    sns.scatterplot(x=pair[0], y='Price', data=housing)
    plt.title(f'{pair[0]} vs. Price')
    plt.xlabel(pair[0])
    plt.ylabel('Price')
    plt.show()

# Bivariate analysis for 'Neighborhood' and 'Price'
plt.figure(figsize=(6, 4))
sns.boxplot(x='Neighborhood', y='Price', data=housing, order=housing.groupby('Neighborhood')['Price'].median().sort_values().index)
plt.title('Neighborhood vs. Price')
plt.xlabel('Neighborhood')
plt.ylabel('Price')
plt.xticks(rotation=45)
plt.show()

# Transform the categotical values
housing= pd.get_dummies(housing).astype(int)
housing.head()

# Drop the negative price values
housing= housing[housing['Price']>=0]
# Split the data into features (X) and target variable (y).
X= housing.drop('Price', axis=1)
y= housing['Price']
# Split the Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42 )

model1 = LinearRegression()
model1.fit(X_train, y_train)

y_pred = model1.predict(X_test)
y_pred = pd.DataFrame(y_pred)
# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared Score: {r2}')

model2 = DecisionTreeRegressor()

# Train the model
model2.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model2.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared Score: {r2}')